//push 메서드: 배열 마지막에 하나 이상의 요소를 추가한 다음 그 배열의 길이를 반환한다.
var a = ["A","B","C"];
a.push("D"); // a의 내용 : ["A","B","C","D"] : 반환 값  = 4
a.push("E","F");

//---------------------------------------------------------------------------------------

//pop메서드 : 배열의 마지막 요쇼를 잘라내어 반환합니다.
var a = ["A","B","C"];
a.pop(); // a -> ["A", "B"] : 반환값 = "C"

//----------------------------------------------------------------------------------------
//shift 메서드 : 배열의 첫번째 요소를 제거한 후 모든 배열 요소를 왼쪽으로 이동시킨다.
//반환 값은 삭제된 요소의 값이다.

var a = ["A","B","C"];
a.shift(); // a -> ["B","C"] : 반환값 = "A"

//-----------------------------------------------------------------------------------------
//unshift 메서드 : 배열 앞부분에 요소를 한개 이상 추가한후, 모든 배열 요소를 오른쪽으로 이동시킨다.
//반환값은 그배열의 길이입니다.
var a = ["A","B","C"];
a.unshift("X"); // a-> ["X","A","B","C"] : 반환값 = 4
a.unshift("Y","Z");

//-----------------------------------------------------------------------------------------
//splice 메서드 : 배열의 요소를 갈아 끼울때 사용 (삭제된 요소를 반환함)

var a = ["A","B","C","D"];
a.splice(1,2,"X","Y","Z"); 
// a-> ["A","X","Y","Z","D"] : 반환값 = ["B","C"]
// 첫번째인자 : 삭제될 첫번째 시작점 인덱스
// 두번째인자: 삭제할 요소의 갯수, 아무런값도 넘기지 않으면 첫번쨰인자로 넘긴 요소 이후의 모든 배열요소 삭제됨
// 세번째인자  끼워질 요소 

//첫번째 인수만 넘기면 그 인덱스 이후에 있는 모든 배열 요소를 삭제함
var a = ["A","B","C","D"];
a.splice(2); // a-> ["A","B"] : 반환값 = ["C","D"]

//두번째 인수가 0 이면 index가 가리키는 요소위치부터 새로운 요소를 끼워넣는다.
var a = ["A","B","C","D"];
a.splice(1,0,"X","Y"); // a-> ["A","X","Y","B","C","D"] ; 반환값 =[]


//------------------------------------------------------------------------------------
//sort 메서드 배열안의 요소를 정렬한다. 반환값은 정렬된 배열

var a = [5, 2, 7, 1, 3, 9, 8];
a.sort( function(a, b) { return a - b;}); // a-> [1,2,3,5,7,8,9]

a.sort( function(a, b){ return b - a ;}); // a-> [9,8,7,5,3,2,1]

var person = [ {name:"TOM", age:17},{name:"Huck", age:19},{name:"Becky", age:16}];

function compairFunc(key){
    return function(a,b){
        return a[key] - b[key]; // b[key] - a[key] 는 내림순
    };
}

person.sort(compairFunc("age")); //person 배열안의 객체가 age의 오름순으로 정렬됨
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//여기까는 원본배열을 바꿔버리는 함수들임
//---------------------------------------------------------------------------------




//여기서부터는 원본 배열을 바꾸지 않음 , 가공된 새로운 배열을 반환하는것뿐임
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//join 메서드 : 배열의 모든 요소값을 문자열로 바꾼후 인수로 받은 문자로 연결해서 반환
var a = ["A","B","C"];
console.log(a.join("-"));   // "A-B-C"
console.log(a.join("")); // "ABC"  빈문자열을 인수로 넘길시 단순히 그대로 연결함
console.log(a); //원본배열을 수정하지 않기때문에 ["A","B","C"] 그대로임

//---------------------------------------------------------------------------------------------
//concat 메서드 : 인수로 받은 값을 그 배열의 요소로 추가하여 새로운 배열 생성

var a = ["A","B","C"];
console.log(a.concat(["D","E"])); // ["A","B","C","D","E"] //배열을 한번 펼쳐서 추가할수 있음
console.log(a.concat(["D","E"],["F","G"])); // ["A","B","C","D","E","F","G"]
console.log(a.concat(1, "X", true)); // ["A","B","C",1 ,"X",true] 
console.log(a);  //원본 배열은 그대로 ["A","B","C"]

console.log(a.concat("D",["E",["F","G"]])); 
//-> ["A","B","C","D","E",["F","G"]] 배열은 한번만 펼쳐져 추가됨 

//-----------------------------------------------------------------------------------------
//slice 메서드 :  배열의 일부 요소를 제거한 새로운 배열을 반환한다.

var a = ["A", "B", "C", "D", "E"];
console.log(a.slice(1,3)); // ->  ["B","C"]  인덱스 1부터 ~ 3-1=2 만 뽑아낸다. 
console.log(a.slice(3)); // -> ["D","E"] 두번째 인수를 생각하면 인덱스3 ~ 마지막 으로 뽑아냄
console.log(a.slice(1,-1)); // -> ["B","C","D"] 음수는 뒤에서n번째를 의미 인덱스 1부터~ 뒤에서부터 첫번째 제외 뽑아냄

//-------------------------------------------------------------------------------------------
// indexOf 와 lastIndexOf 메서드
//indexOf 배열의 0번부터 인수와 일치하는 인덱스를 찾아 반환
//lastIndexOf 배열의 마지막부터 0번으로 향하면서 인수와 일치하는 인덱스를 찾아 반환


var a = ["lion","cyper","lie"];
console.log(a.indexOf("cyper")); //1을 반환함
console.log(a.lastIndexOf("lie")); //2를 반환함


var a = ["A","cyper","A"];
console.log(a.indexOf("A")); //0을반환함
console.log(a.indexOf("A",1)); //두번째 인수의 인덱스부터 검색할수 있게 할수있음 
                               //이경우는 인덱스 1부터 검색되므로 2반환

//-------------------------------------------------------------------------------------------------
//toString 메서드: 배열의 요소를 문자열로 변환하여 쉼표로 연결한 문자열을 반환한다.

var a = ["lion","cyper","lie"];
console.log(a.toString()); // lion,cyper,lie 출력됨
console.log(a);            // ['lion','cyper','lie'] 출력됨


var date = new Date();
console.log(["A","B","C",date].toString()); // A,B,C,Sat Jul 25 2020 03:23:33 GMT+0900 (대한민국 표준시)
console.log(["A","B","C",date].toLocaleString()); //A,B,C,2020. 7. 25. 오전 3:23:33
//toLocaleString()을 쓰면 해당 지역에 맞는 언어로 번역한 문자열로 반환함

////////////////////////////////////////////////////////////////////////////////////////////////
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//여기서 부터 반복메서드 관련 
//배열의 모든 요소를 순회하며 특정한 작업을 수행
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

//---------------------------------------------------------------------------------------
//forEach 메서드 : 인수로 받은 함수를 배열의 요소별로 한번씩 실행한다.
//함수의 인수에는 세개(value,index,array)가 전달된다.
// for문의 대용으로 사용할 수 있다.
var a = [1, 2, 3, 4, 5];
//배열의 합을 구한다.
var sum = 0;
a.forEach(function(value){sum += value;});
console.log(sum); // -> 15

//각 배열의 요소에 제곱을 한다.
a.forEach(function(v,i,a){ a[i] = v*v;});
console.log(a); // ->[1, 4, 9, 16, 25]

//------------------------------------------------------------------------------------------
//map 메서드 : 인수로 받은 함수를 배열의 요소별로 한 번씩 실행하며, 마지막에는 그 함수가 반환한 값으로
//새로운 배열을 생성한다. map 메서드의 인수로 넘기는 함수는 반드시 값을 반환해야한다.

var a = [ 1, 2, 3, 4, 5];
var b = a.map(function(x){ return 2*x ; }); // b =[ 2, 4, 6, 8, 10]

var a = [ 1, 4, 9, 16, 25];
var b = a.map(Math.sqrt); // b= [1, 2, 3, 4, 5]


var persons = [
    { name: "TOM" , age : 17},
    { name: "Huck" , age : 18},
    { name: "Becky" , age : 16},
];

var names = persons.map(person => person.name);
var ages = persons.map(person => person.age);

console.log(names); // -> ["TOM","Huck","Becky"]
console.log(ages); // -> [17 , 18 , 16]

//map은 결과적으로 배열을 반환하므로  map.안에 map을 쓸수 있음
person.map(person => person.name).map(name => name.length);
//names라는 배열이 ["TOM","Huck","Becky"] 인데 이배열에 map을 돌리니, 문자의 길이인
//[3, 4, 5] 가 반환됨